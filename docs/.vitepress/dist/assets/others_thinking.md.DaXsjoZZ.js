import{_ as a,c as i,o as l,a2 as e}from"./chunks/framework.CBOTroAR.js";const _=JSON.parse('{"title":"thinking","description":"","frontmatter":{},"headers":[],"relativePath":"others/thinking.md","filePath":"others/thinking.md"}'),t={name:"others/thinking.md"},x=e('<h1 id="thinking" tabindex="-1">thinking <a class="header-anchor" href="#thinking" aria-label="Permalink to &quot;thinking&quot;">​</a></h1><p>列出所有相关元素 思考 what how why 不断递归提问 最后总结</p><p>费曼技巧</p><p>按日/按事件总结</p><p>听过 =&gt; 知道 =&gt; 理解 =&gt; 能讲</p><p>记录碎片化知识，反复记忆 通过自己组织逻辑（如按时间顺序、重要性等逻辑） 说出来，抓住中心论点重复展开 这套流程的驱动力是正向反馈</p><p>学习 =&gt; 思考 =&gt; 记录 =&gt; 复习</p><p>阅读源码有助于加深对抽象概念的理解，了解优秀框架的目录结构设计，看到陌生的东西深入理解，以问题驱动的方式学习 优先看源码作者的文章，其次断点走流程 学会从代码中看出理论是最佳学习方式，总结抽象源码精华</p><p>视野 + 信仰 + 努力</p><h3 id="如何提升" tabindex="-1">如何提升 <a class="header-anchor" href="#如何提升" aria-label="Permalink to &quot;如何提升&quot;">​</a></h3><ol><li>多思考、多实践</li><li>深入业务水平</li><li>如何减轻工作量，提高效率</li><li>价值产出</li></ol><h3 id="如何有效完成任务" tabindex="-1">如何有效完成任务 <a class="header-anchor" href="#如何有效完成任务" aria-label="Permalink to &quot;如何有效完成任务&quot;">​</a></h3><ol><li>任务评审：了解背景，明确需求</li><li>可行性评估：涉及面评估（时间、调整点、内外部协作方有哪些、风险预警），梳理出一份可执行的方案大纲</li><li>任务拆解：细化流程、验证完善方案，再逐个执行子任务，中间有风险就报风险</li><li>任务落地：如何验证</li><li>结果检测：效果如何</li><li>如果效果不达预期，重复2-5的步骤</li></ol><h3 id="项目反思" tabindex="-1">项目反思 <a class="header-anchor" href="#项目反思" aria-label="Permalink to &quot;项目反思&quot;">​</a></h3><p>1、怎么思考 2、做了什么 3、还可以怎么改进 4、业内怎么做的 5、有哪些缺陷</p><h3 id="汇报" tabindex="-1">汇报 <a class="header-anchor" href="#汇报" aria-label="Permalink to &quot;汇报&quot;">​</a></h3><ol><li>持续优化xxx</li><li>重构了xxx</li><li>梳理xxx，总结xxx</li><li>排查xxx问题</li><li>改进了xxx逻辑，性能得到提升</li><li>通过 xxx 降低了 xxx 至 xxx</li><li>为了 xxx 重新设计了 xxx</li><li>为了 xxx 通过 xxx 完成了 xxx</li><li>通过 xxx 优化了 xxx 为 xxx</li><li>为了 xxx 将 xxx 应用到了 xxx</li><li>通过 xxx 提高了 xxx 至 xxx</li><li>为了 xxx 通过 xxx 将 xxx 集成</li><li>为了 xxx 通过 xxx 成立了 xxx</li></ol><h3 id="组件设计" tabindex="-1">组件设计 <a class="header-anchor" href="#组件设计" aria-label="Permalink to &quot;组件设计&quot;">​</a></h3><ol><li>设计HTML结构</li><li>设计组件的API</li><li>设计用户控制流程（交互） 插件式依赖注入：渐进增强功能</li></ol><h3 id="连续动画设计" tabindex="-1">连续动画设计 <a class="header-anchor" href="#连续动画设计" aria-label="Permalink to &quot;连续动画设计&quot;">​</a></h3><ol><li>将连续的动画分解为若干个固定轨迹的动画，固定轨迹动画可以抽象为一个由动画周期(T)、动画执行时间(t)，以及时间与属性值的映射函数(progress) 共同决定的模型</li><li>为每个阶段的动画设计轨迹方程，找出动画变量和时间的关系</li><li>确定每个阶段的动画周期（duration）和与动画变量对应的CSS属性</li><li>利用异步的方式（Promise）连接每个阶段的动画，形成一个连续的动画效果</li></ol><p>系统性的思考整个体系，而不是单纯的实现某个页面</p><h3 id="结构化思维" tabindex="-1">结构化思维 <a class="header-anchor" href="#结构化思维" aria-label="Permalink to &quot;结构化思维&quot;">​</a></h3><p>抓住问题核心点、合理拆分成小问题直至被穷尽解决</p><p>演绎（因果）顺序：“大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。 时间（步骤）顺序：“第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。 空间（结构）顺序：“前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。 程度（重要性）顺序：比如“最重要、次重要、不重要”等。</p><p>提出问题 -&gt; 定义问题 -&gt; 分析问题 -&gt; 解决问题 -&gt; 展望未来</p><h3 id="了解听众" tabindex="-1">了解听众 <a class="header-anchor" href="#了解听众" aria-label="Permalink to &quot;了解听众&quot;">​</a></h3><p>你想让他们学到什么？ 他们对你讲的什么感兴趣？ 他们有多富有经验？ 他们想要多少细节？ 你先让谁拥有这些信息？ 你如何促使他们听你说话？</p><h3 id="沟通" tabindex="-1">沟通 <a class="header-anchor" href="#沟通" aria-label="Permalink to &quot;沟通&quot;">​</a></h3><p>知道你想要说什么 了解你的听众 选择时机 选择风格 让文档更美观 让听众参与 做倾听者 回复他人</p><h3 id="非暴力沟通" tabindex="-1">非暴力沟通 <a class="header-anchor" href="#非暴力沟通" aria-label="Permalink to &quot;非暴力沟通&quot;">​</a></h3><p>四要素：观察、感受、需要、请求 区分观察和评论 体会和表达感受 我们的需要和期待以及他人言行的看法导致了我们的感受 请求帮助</p><h3 id="学习" tabindex="-1">学习 <a class="header-anchor" href="#学习" aria-label="Permalink to &quot;学习&quot;">​</a></h3><p>运用回想 自我测试 对问题进行组块 间隔开重复动作 在练习中交替使用不同的接替技巧 注意休息 使用解释性的提问和简单类比 专注 困难的事情最先做 心理对照</p><p>记忆宫殿法 比喻类比法 尝试用简洁的语言解释</p>',35),o=[x];function r(h,n,s,d,p,c){return l(),i("div",null,o)}const b=a(t,[["render",r]]);export{_ as __pageData,b as default};
