import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.CBOTroAR.js";const x=JSON.parse('{"title":"后端","description":"","frontmatter":{},"headers":[],"relativePath":"others/后端.md","filePath":"others/后端.md"}'),r={name:"others/后端.md"},i=o('<h1 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="dao-data-access-object-数据访问对象" tabindex="-1">DAO(Data Access Object) 数据访问对象 <a class="header-anchor" href="#dao-data-access-object-数据访问对象" aria-label="Permalink to &quot;DAO(Data Access Object) 数据访问对象&quot;">​</a></h3><p>在业务逻辑层(Service)对sql 进行操作<br> xxxDAO xxx即为实体类名</p><h3 id="dto-data-transfer-object-数据传输对象" tabindex="-1">DTO(Data Transfer Object) 数据传输对象 <a class="header-anchor" href="#dto-data-transfer-object-数据传输对象" aria-label="Permalink to &quot;DTO(Data Transfer Object) 数据传输对象&quot;">​</a></h3><p>对控制层进行数据传输时使用，即前端向后台提交数据<br> xxxDTO xxx为业务领域相关的名称</p><h3 id="do-domain-object-领域对象" tabindex="-1">DO(Domain Object) 领域对象 <a class="header-anchor" href="#do-domain-object-领域对象" aria-label="Permalink to &quot;DO(Domain Object) 领域对象&quot;">​</a></h3><p>在业务逻辑层(Service)对数据库(SQL)的访问时接收数据使用<br> xxxDO xxx为数据表名</p><h3 id="vo-view-object-视图模型" tabindex="-1">VO(View Object) 视图模型 <a class="header-anchor" href="#vo-view-object-视图模型" aria-label="Permalink to &quot;VO(View Object) 视图模型&quot;">​</a></h3><p>在业务逻辑层(Service)对Web的视图模型的展示，即后台向前端传输数据<br> xxxVO xxx为网页名称</p><h3 id="ao-application-object-应用对象" tabindex="-1">AO(Application Object) 应用对象 <a class="header-anchor" href="#ao-application-object-应用对象" aria-label="Permalink to &quot;AO(Application Object) 应用对象&quot;">​</a></h3><h3 id="bo-bussiness-object-业务对象" tabindex="-1">BO(Bussiness Object) 业务对象 <a class="header-anchor" href="#bo-bussiness-object-业务对象" aria-label="Permalink to &quot;BO(Bussiness Object) 业务对象&quot;">​</a></h3><p>业务功能模块</p><h3 id="pojo-plain-oridinary-java-object-纯普通java对象" tabindex="-1">POJO(Plain Oridinary Java Object) 纯普通Java对象 <a class="header-anchor" href="#pojo-plain-oridinary-java-object-纯普通java对象" aria-label="Permalink to &quot;POJO(Plain Oridinary Java Object) 纯普通Java对象&quot;">​</a></h3><h3 id="po-persistent-object-持久化对象" tabindex="-1">PO(Persistent Object) 持久化对象 <a class="header-anchor" href="#po-persistent-object-持久化对象" aria-label="Permalink to &quot;PO(Persistent Object) 持久化对象&quot;">​</a></h3><p>一个PO就是数据库中的一条记录</p><h3 id="entity-实体" tabindex="-1">Entity 实体 <a class="header-anchor" href="#entity-实体" aria-label="Permalink to &quot;Entity 实体&quot;">​</a></h3><h3 id="model-实体类和模型" tabindex="-1">Model 实体类和模型 <a class="header-anchor" href="#model-实体类和模型" aria-label="Permalink to &quot;Model 实体类和模型&quot;">​</a></h3><p>现实世界抽象的实体类<br> 在MVC模式中，Model代表模型，是业务流程/状态的处理以及业务规则的制定，接受视图请求的数据，并返回最终的结果</p><h3 id="view-视图模型" tabindex="-1">View 视图模型 <a class="header-anchor" href="#view-视图模型" aria-label="Permalink to &quot;View 视图模型&quot;">​</a></h3><p>Web =&gt; DTO =&gt; Controller =&gt; Service =&gt; DAO =&gt; MySql =&gt; Do =&gt; Model =&gt; View</p><p>Repository 层只关注数据读写(Entity)<br> Services 层只关注业务逻辑(BO)<br> Controller 层只关注与外界打交道，数据校验、封装、格式转换(VO)</p>',22),c=[i];function n(s,l,d,h,b,p){return t(),e("div",null,c)}const j=a(r,[["render",n]]);export{x as __pageData,j as default};
