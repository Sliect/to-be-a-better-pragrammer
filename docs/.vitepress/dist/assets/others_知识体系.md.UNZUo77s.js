import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.CBOTroAR.js";const g=JSON.parse('{"title":"知识体系","description":"","frontmatter":{},"headers":[],"relativePath":"others/知识体系.md","filePath":"others/知识体系.md"}'),t={name:"others/知识体系.md"},p=n(`<h1 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h1><h2 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h2><p>外边距重叠：</p><ul><li>同一层相邻元素间（兄弟合并）</li><li>没有内容将父元素和后代元素分开（父子合并）</li><li>空的块级元素（合并自身）</li></ul><p>元素的百分比尺寸受其包含块（border-box宽度）的影响</p><h2 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h2><p>对象转原始类型按Symbol.toPrimitive(), valueOf(), toString()的顺序调用</p><table><tr><th></th><th colspan="7">被比较值 B</th></tr><tr><th></th><td></td><td>Undefined</td><td>Null</td><td>Number</td><td>String</td><td>Boolean</td><td>Object</td></tr><tr><th rowspan="6">被比较值 A</th><td>Undefined</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>IsFalsy(B)</td></tr><tr><td>Null</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>IsFalsy(B)</td></tr><tr><td>Number</td><td>false</td><td>false</td><td>A === B</td><td>A === ToNumber(B)</td><td>A === ToNumber(B)</td><td>A == ToPrimitive(B)</td></tr><tr><td>String</td><td>false</td><td>false</td><td>ToNumber(A) === B</td><td>A === B</td><td>ToNumber(A) === ToNumber(B)</td><td>ToPrimitive(B) == A</td></tr><tr><td>Boolean</td><td>false</td><td>false</td><td>ToNumber(A) === B</td><td>ToNumber(A) === ToNumber(B)</td><td>A === B</td><td>ToNumber(A) == ToPrimitive(B)</td></tr><tr><td>Object</td><td>false</td><td>false</td><td>ToPrimitive(A) == B</td><td>ToPrimitive(A) == B</td><td>ToPrimitive(A) == ToNumber(B)</td><td>A === B</td></tr></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 防抖 多次调用重新计时 多次调用一次执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wait</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timer, context, args</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> later</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">immediate) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, wait)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timer) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> later</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (immediate) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 立即执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 延后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 重新计时</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      timer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> later</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 节流 每隔一段时间调用 多次调用一段时间执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wait) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h2><p>浏览器的网络请求过程</p><ol><li><p>构建请求</p></li><li><p>是否命中强缓存</p></li><li><p>DNS解析</p></li><li><p>建立TCP连接 （3次握手确认双方建立连接，且双方的发送和接收能力都没问题）</p></li><li><p>发送http请求</p></li><li><p>服务器响应http请求</p></li></ol><p>http是无连接的</p><p>http是媒体独立的：客户端和服务器指定使用适合的 MIME-type 内容类型</p><p>http是无状态的</p><p>请求行 请求头部 空行 请求数据<br> 状态行 消息报头 空行 响应正文</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息，并返回实体主体</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）</td></tr><tr><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新</td></tr></tbody></table><p><strong>HTTP1.0</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>GET / HTTP/1.0</span></span>
<span class="line"><span>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)</span></span>
<span class="line"><span>Accept: */*</span></span></code></pre></div><p>第一行是请求命令，必须在尾部添加协议版本（HTTP/1.0）。后面就是多行头信息，描述客户端的情况</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HTTP/1.0 200 OK </span></span>
<span class="line"><span>Content-Type: text/plain</span></span>
<span class="line"><span>Content-Length: 137582</span></span>
<span class="line"><span>Expires: Thu, 05 Dec 1997 16:00:00 GMT</span></span>
<span class="line"><span>Last-Modified: Wed, 5 August 1996 15:55:28 GMT</span></span>
<span class="line"><span>Server: Apache 0.84</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;body&gt;Hello World&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><p>消息报头由协议版本+状态码+状态描述<br> Content-Type 告诉客户端数据是什么格式<br> Content-Encoding 说明数据的压缩方式，有gzip, compress, deflate 三种<br> Accept-Encoding 说明客户端接收的数据的压缩方法<br> http1.0缺点: 每个TCP连接只能发送一个请求，发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接，但是TCP连接的新建成本很高，因为客户端和服务器要三次握手，所以性能比较差</p><p><strong>HTTP1.1</strong><br> 引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用，不用声明 Connection: keep-alive ，客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。客户端在最后一个请求时，发送 Connection: close ，明确要求服务器关闭TCP连接<br> 引入了管道机制，即在同一个TCP连接里面，客户端可以同时发送多个请求<br> Content-Length 字段声明本次回应的数据长度<br> 分块传输编码，当服务器等所有操作完成才发送数据，这样效率不高，更好的处理方法是产生一块数据，就发送一块，采用&quot;流模式&quot;取代&quot;缓存模式&quot;。只要请求或响应的头信息有 Transfer-Encoding 字段，就表明响应将有数量未定的数据块组成</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Transfer-Encoding: chunked</span></span></code></pre></div><p>每个非空的数据块之前，会有一个16进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Content-Type: text/plain</span></span>
<span class="line"><span>Transfer-Encoding: chunked</span></span>
<span class="line"><span></span></span>
<span class="line"><span>25</span></span>
<span class="line"><span>This is the data in the first chunk</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1C</span></span>
<span class="line"><span>and this is the second one</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>con</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8</span></span>
<span class="line"><span>sequence</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0</span></span></code></pre></div><p>http1.1缺点：同一个TCP连接里，所有数据通信是按次序进行，服务器只有处理完一个响应，才会进行下一个。要是前面的响应特别慢，后面就会有许多请求排队，称之为&quot;队头堵塞&quot;，http1.1解决了请求队头堵塞，没有解决响应对头堵塞。两者方法避免，一是减少请求数，二是同时多开持久连接</p><p><strong>HTTP/2</strong> 二进制协议，头信息和数据体都是二进制，统称为&quot;帧&quot;：头信息帧和数据帧<br> 多工，客户端和浏览器都可以同时发送多个请求或响应，而且不用按照顺序一一对应，避免了队头堵塞<br> 数据流，http/2的数据包是不按顺序发送的，同一个连续的数据包可能属于不同的响应。因此要对数据包做标记，指出它属于哪个响应。http/2将每个请求或响应的所有数据包称为一个数据流，每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，客户端发出的为奇数，服务器发出的为偶数。数据流发送一半的时候，发送方可以发送信号（RST_STREAM帧）取消数据流，但是不关闭TCP连接。客户端还可以指定数据流的优先级，优先级越高，服务器就会越早响应<br> 头信息压缩，http协议不带有状态，每次请求都必须附上所有信息，因此很多字段会有冗余，浪费带宽，http/2引入头信息压缩机制，使用gzip或compress压缩后再发送；另外，客户端和服务器同时维护一张头信息表，所有字段会存入这个表，生成一个索引号，以后就不发送同样字段，只发送索引号，提高速度<br> 服务器推送，即http/2允许服务器未经请求，主动向客户端发送资源。如客户端请求一个网页，网页包含很多静态资源，服务器可以在客户端请求网页后，主动把静态资源随着网页一起发送给客户端</p><h2 id="编译原理" tabindex="-1">编译原理 <a class="header-anchor" href="#编译原理" aria-label="Permalink to &quot;编译原理&quot;">​</a></h2><h2 id="浏览器工作原理" tabindex="-1">浏览器工作原理 <a class="header-anchor" href="#浏览器工作原理" aria-label="Permalink to &quot;浏览器工作原理&quot;">​</a></h2><p>v8内存限制在64位下1.4G,在32位下0.7G</p><p>为什么设置上限？因为js是单线程，且垃圾回收机制很消耗时间</p><p>v8把堆内存分为新生代内存和老生代内存两部分，新生代是临时分配的，存活时间少，分配空间小；老生代是内存常驻，存活时间长，分配空间大。</p><p>新生代内存又分为from和to两部分，from表示当前正在使用的内存，to表示当前闲置的内存。算法是将from中正在使用的内存复制到to中，将不使用的内存部分回收，然后from和to的角色对调。好处是将零散化的空间按顺序重新排列，因为堆内存的特性是需要一连串的空间。（空间换时间）</p><p>当新生代的内存经过多次回收之后仍然存在，就会被放入到老生代内存中，称之为晋升。还有一种情况会发生晋升，就是经历过一次回收且to的内存占用超过25%</p><p>老生代的垃圾回收机制：遍历堆中的所有对象，做上标记，然后对正在被使用或强引用的变量取消标记，在随后的清除阶段回收标记的变量。接着整理内存碎片，把存活的对象全部往一端靠拢（耗时长），如果垃圾回收的任务很重，就会发生阻塞，优化办法是将标记分块执行，让js穿插着运行，标记阶段完成，才进行内存碎片的整理，这就是增量标记</p><p>v8引擎执行js代码</p><ol><li><p>生成AST（抽象语法树）</p></li><li><p>生成字节码</p></li><li><p>由解释器逐行执行字节码，遇到热点代码启动编译器进行编译，生成对应的机器码, 以优化执行效率</p></li></ol><p>EventLoop</p><ol><li><p>整段脚本作为第一个宏任务执行</p></li><li><p>同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列</p></li><li><p>当前宏任务执行完出队，检查微任务队列，如果有则依次执行，直到微任务队列为空</p></li><li><p>执行浏览器UI线程的渲染工作</p></li><li><p>检查是否有Web Worker任务，有则执行</p></li><li><p>执行队首新的宏任务，回到2，依次循环，直到宏任务和微任务队列都为空</p></li></ol><p>浏览器解析和渲染</p><ol><li><p>构建DOM树</p></li><li><p>样式计算</p></li><li><p>生成布局树</p></li><li><p>渲染</p></li></ol><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h2><h2 id="跨端开发" tabindex="-1">跨端开发 <a class="header-anchor" href="#跨端开发" aria-label="Permalink to &quot;跨端开发&quot;">​</a></h2><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h2><p>xss攻击</p><ol><li><p>存储型 存储到数据库，等页面渲染的时候直接执行js攻击代码</p></li><li><p>反射型 恶意脚本为网络请求的一部分，并不存储到数据库中，直接返回给浏览器</p></li><li><p>文档型 在数据传输过程劫持到网络数据包，然后修改里面的 html 文档</p></li></ol><p>防范：不相信用户的输入，如果攻击cookie，利用cookie的httpOnly属性</p><p>csrf 跨站攻击 （引诱点击发送恶意请求）</p><p>防范：cookie</p>`,52),l=[p];function h(e,k,d,r,E,o){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
