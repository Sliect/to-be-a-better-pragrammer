import{_ as a,c as s,o as t,a2 as e}from"./chunks/framework.CBOTroAR.js";const _=JSON.parse('{"title":"rust","description":"","frontmatter":{},"headers":[],"relativePath":"backend/rust.md","filePath":"backend/rust.md"}'),p={name:"backend/rust.md"},n=e(`<h1 id="rust" tabindex="-1">rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;rust&quot;">​</a></h1><p>获取 rust 文档</p><blockquote><p>rustup doc --std</p></blockquote><p>安装这个包后可以用命令式添加crate</p><blockquote><p>cargo install cargo-edit</p></blockquote><p>删除依赖</p><blockquote><p>cargo rm xxx</p></blockquote><h2 id="所有权" tabindex="-1">所有权 <a class="header-anchor" href="#所有权" aria-label="Permalink to &quot;所有权&quot;">​</a></h2><ol><li>Rust中每个值都被一个变量所拥有</li><li>当所有者（变量）离开作用域范围时，这个值被丢弃</li></ol><p>长度确定的基本类型存储在栈上，长度不定或可扩展的类型存储在堆上</p><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>中文占三个字节</p><p>字符串索引是按照字节计算</p><p>格式占位符</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{}：默认格式化输出，用于打印各种类型的值。</span></span>
<span class="line"><span>{:#?}：以更美观的形式打印调试输出，通常用于打印结构体、枚举等复杂类型的值。</span></span>
<span class="line"><span>{:?}：以调试格式打印值，用于打印调试信息，可用于打印任何类型的值。</span></span>
<span class="line"><span>{:.x}：浮点数占位符，其中 x 代表小数点后的位数，用于控制浮点数的显示精度。</span></span>
<span class="line"><span>{:&lt;x}：左对齐格式化输出，其中 x 代表最小宽度。</span></span>
<span class="line"><span>{:&gt;x}：右对齐格式化输出，其中 x 代表最小宽度。</span></span>
<span class="line"><span>{:^x}：居中对齐格式化输出，其中 x 代表最小宽度。</span></span></code></pre></div><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><ol><li>每一个引用参数都会获得独自的生命周期</li></ol><p>例如一个引用参数的函数就有一个生命周期标注: fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32)，两个引用参数的有两个生命周期标注:fn foo&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a i32, y: &amp;&#39;b i32), 依此类推。</p><ol start="2"><li>若只有一个输入生命周期(函数参数中只有一个引用类型)，那么该生命周期会被赋给所有的输出生命周期，也就是所有返回值的生命周期都等于该输入生命周期</li></ol><p>例如函数 fn foo(x: &amp;i32) -&gt; &amp;i32，x 参数的生命周期会被自动赋给返回值 &amp;i32，因此该函数等同于 fn foo&lt;&#39;a&gt;(x: &amp;&#39;a i32) -&gt; &amp;&#39;a i32</p><ol start="3"><li>若存在多个输入生命周期，且其中一个是 &amp;self 或 &amp;mut self，则 &amp;self 的生命周期被赋给所有的输出生命周期</li></ol><p>拥有 &amp;self 形式的参数，说明该函数是一个 方法，该规则让方法的使用便利度大幅提升。</p><p>&#39;static 静态生命周期，活得和程序一样久</p>`,23),l=[n];function o(i,r,c,d,u,h){return t(),s("div",null,l)}const f=a(p,[["render",o]]);export{_ as __pageData,f as default};
